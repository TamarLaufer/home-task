{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchImagesFromAPI } from '../services/api';\nconst initialState = {\n  images: [],\n  currentPage: 1,\n  category: 'nature',\n  sortBy: 'id',\n  loading: false,\n  error: null,\n  selectedImage: null\n};\nexport const fetchImages = createAsyncThunk('gallery/fetchImages', async ({\n  category,\n  page,\n  sortBy\n}) => {\n  return await fetchImagesFromAPI({\n    category,\n    page,\n    sortBy\n  });\n});\nconst gallerySlice = createSlice({\n  name: 'gallery',\n  initialState,\n  reducers: {\n    setCategory: (state, action) => {\n      state.category = action.payload;\n      if (state.currentPage > 1) {\n        state.currentPage -= 1;\n      }\n    },\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    setSortBy: (state, action) => {\n      state.sortBy = action.payload;\n    },\n    setSelectedImage: (state, action) => {\n      state.selectedImage = action.payload;\n    },\n    clearSelectedImage: state => {\n      state.selectedImage = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchImages.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchImages.fulfilled, (state, action) => {\n      state.loading = false;\n      state.images = action.payload.hits;\n    }).addCase(fetchImages.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setCategory,\n  setCurrentPage,\n  setSortBy,\n  setSelectedImage,\n  clearSelectedImage\n} = gallerySlice.actions;\nexport default gallerySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchImagesFromAPI","initialState","images","currentPage","category","sortBy","loading","error","selectedImage","fetchImages","page","gallerySlice","name","reducers","setCategory","state","action","payload","setCurrentPage","setSortBy","setSelectedImage","clearSelectedImage","extraReducers","builder","addCase","pending","fulfilled","hits","rejected","message","actions","reducer"],"sources":["C:/Users/לאופר/Documents/home-task/client/src/store/gallerySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { fetchImagesFromAPI } from '../services/api';\r\n\r\nconst initialState = {\r\n  images: [],\r\n  currentPage: 1,\r\n  category: 'nature',\r\n  sortBy: 'id',\r\n  loading: false,\r\n  error: null,\r\n  selectedImage: null,\r\n};\r\n\r\nexport const fetchImages = createAsyncThunk(\r\n  'gallery/fetchImages',\r\n  async ({ category, page, sortBy }) => {\r\n    return await fetchImagesFromAPI({ category, page, sortBy });\r\n  }\r\n);\r\n\r\nconst gallerySlice = createSlice({\r\n  name: 'gallery',\r\n  initialState,\r\n  reducers: {\r\n    setCategory: (state, action) => {\r\n      state.category = action.payload;\r\n      if (state.currentPage > 1) {\r\n        state.currentPage -= 1;\r\n      }\r\n    },\r\n    setCurrentPage: (state, action) => {\r\n      state.currentPage = action.payload;\r\n    },\r\n    setSortBy: (state, action) => {\r\n      state.sortBy = action.payload;\r\n    },\r\n    setSelectedImage: (state, action) => {\r\n      state.selectedImage = action.payload;\r\n    },\r\n    clearSelectedImage: (state) => {\r\n      state.selectedImage = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchImages.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchImages.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.images = action.payload.hits;\r\n      })\r\n      .addCase(fetchImages.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { \r\n  setCategory, \r\n  setCurrentPage, \r\n  setSortBy, \r\n  setSelectedImage, \r\n  clearSelectedImage \r\n} = gallerySlice.actions;\r\n\r\nexport default gallerySlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,kBAAkB,QAAQ,iBAAiB;AAEpD,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,CAAC;EACdC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGV,gBAAgB,CACzC,qBAAqB,EACrB,OAAO;EAAEK,QAAQ;EAAEM,IAAI;EAAEL;AAAO,CAAC,KAAK;EACpC,OAAO,MAAML,kBAAkB,CAAC;IAAEI,QAAQ;IAAEM,IAAI;IAAEL;EAAO,CAAC,CAAC;AAC7D,CACF,CAAC;AAED,MAAMM,YAAY,GAAGb,WAAW,CAAC;EAC/Bc,IAAI,EAAE,SAAS;EACfX,YAAY;EACZY,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACX,QAAQ,GAAGY,MAAM,CAACC,OAAO;MAC/B,IAAIF,KAAK,CAACZ,WAAW,GAAG,CAAC,EAAE;QACzBY,KAAK,CAACZ,WAAW,IAAI,CAAC;MACxB;IACF,CAAC;IACDe,cAAc,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACZ,WAAW,GAAGa,MAAM,CAACC,OAAO;IACpC,CAAC;IACDE,SAAS,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACV,MAAM,GAAGW,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDG,gBAAgB,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MACnCD,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACC,OAAO;IACtC,CAAC;IACDI,kBAAkB,EAAGN,KAAK,IAAK;MAC7BA,KAAK,CAACP,aAAa,GAAG,IAAI;IAC5B;EACF,CAAC;EACDc,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,WAAW,CAACgB,OAAO,EAAGV,KAAK,IAAK;MACvCA,KAAK,CAACT,OAAO,GAAG,IAAI;MACpBS,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAACf,WAAW,CAACiB,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACb,MAAM,GAAGc,MAAM,CAACC,OAAO,CAACU,IAAI;IACpC,CAAC,CAAC,CACDH,OAAO,CAACf,WAAW,CAACmB,QAAQ,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACT,KAAK,CAACsB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXf,WAAW;EACXI,cAAc;EACdC,SAAS;EACTC,gBAAgB;EAChBC;AACF,CAAC,GAAGV,YAAY,CAACmB,OAAO;AAExB,eAAenB,YAAY,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}